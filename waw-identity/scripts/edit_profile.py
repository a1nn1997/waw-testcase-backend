import identity_pb2_grpc
import identity_pb2
import argparse
from datetime import datetime, timezone
import uuid
import grpc
import sys
from pathlib import Path
from dotenv import load_dotenv

# Include generated gRPC files
sys.path.insert(0, str(Path(__file__).resolve().parents[1] / "dist"))


# Constants
GRPC_SERVER = "localhost:50051"


class ProfileUpdater:
    """Handles the logic of updating and retrieving profiles via gRPC."""

    def __init__(self, grpc_server: str):
        self.channel = grpc.insecure_channel(grpc_server)
        self.stub = identity_pb2_grpc.IdentityServiceStub(self.channel)

    def get_existing_profile(self) -> identity_pb2.UserProfile:
        """Fetch the existing profile if available, otherwise return an empty profile."""
        try:
            return self.stub.GetProfile(identity_pb2.Empty())
        except grpc.RpcError as e:
            print(f"Error fetching profile: {e.details()}")
            return identity_pb2.UserProfile()

    def update_profile(
            self,
            profile: identity_pb2.UserProfile) -> identity_pb2.UserProfile:
        """Update the profile and return the response."""
        try:
            return self.stub.UpdateProfile(
                identity_pb2.ProfileDelta(profile=profile))
        except grpc.RpcError as e:
            print(f"Error updating profile: {e.details()}")
            return identity_pb2.UserProfile()


def create_or_update_profile(
        existing: identity_pb2.UserProfile,
        args) -> identity_pb2.UserProfile:
    """Create or update a user profile."""
    now = datetime.now(timezone.utc).isoformat(
    )  # Use ISO 8601 formatted string

    # Use existing profile if present, otherwise create a new one
    profile = identity_pb2.UserProfile(
        id=args.id or (existing.id if existing.id else str(uuid.uuid4())),
        name=args.name,
        email=args.email,
        phone=args.phone,
        created_at=existing.created_at or now,  # Ensure these are strings
        updated_at=now,  # Ensure this is also an ISO 8601 formatted string
    )
    return profile


def parse_arguments():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(
        description="Update user profile via gRPC")
    parser.add_argument(
        "--id",
        help="User ID (optional, autogenerated if not provided)")
    parser.add_argument("--name", required=True, help="User full name")
    parser.add_argument("--email", required=True, help="User email address")
    parser.add_argument(
        "--phone",
        required=False,
        default="",
        help="Phone number")
    return parser.parse_args()


def print_profile_update_response(response: identity_pb2.UserProfile):
    """Print the response of the updated profile."""
    print("âœ… Profile updated:")
    print(f"id: {response.id}")
    print(f"name: {response.name}")
    print(f"email: {response.email}")
    print(f"phone: {response.phone}")
    print(f"created_at: {response.created_at}")
    print(f"updated_at: {response.updated_at}")


def main():
    # Parse arguments
    args = parse_arguments()

    # Initialize ProfileUpdater class to handle gRPC calls
    updater = ProfileUpdater(GRPC_SERVER)

    # Fetch the existing profile (if any)
    existing_profile = updater.get_existing_profile()

    # Create or update profile based on provided arguments
    profile = create_or_update_profile(existing_profile, args)

    # Update the profile via gRPC
    response = updater.update_profile(profile)

    # Print the response of the updated profile
    print_profile_update_response(response)


if __name__ == "__main__":
    main()
